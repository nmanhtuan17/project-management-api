name: Docker Build and Deploy
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Create .env file
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "MAIL_KEY=${{ secrets.MAIL_KEY }}" >> .env
          echo "MAIL_DOMAIN=${{ secrets.MAIL_DOMAIN }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}" >> .env
          echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
          echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker Image
        run: docker build -t tuaans/project-manager-api .
      - name: Push Docker Image
        run: docker push tuaans/project-manager-api
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} << 'EOF'
            if sudo docker ps -q --filter "status=running" | grep -q .; then
              sudo docker stop $(sudo docker ps -q --filter "status=running")
            fi
            
            if sudo docker ps -a -q | grep -q .; then
              sudo docker rm $(sudo docker ps -a -q)
            fi
            
            sudo docker pull tuaans/project-manager-api
            
            sudo docker run -d -p 80:3000 tuaans/project-manager-api
            
            sudo docker image prune -f
          EOF